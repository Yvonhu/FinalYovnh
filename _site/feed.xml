<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Toasty Jekyll</title>
    <description>A super simple white label website built with Jekyll and using Dan Eden's Toast grid layout.
</description>
    <link>http://localhost:4000 /</link>
    <atom:link href="http://localhost:4000 /feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 13 Dec 2021 00:13:37 +0800</pubDate>
    <lastBuildDate>Mon, 13 Dec 2021 00:13:37 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Welcome to Lab5!</title>
        <description>&lt;h3 id=&quot;back-to-home&quot;&gt;&lt;strong&gt;&lt;em&gt;Back to &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;download&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Yvonhu/repo/tree/main/Lab5&quot;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;the-all-steps-to-get-emscripten-development-environment-working&quot;&gt;The all steps to get Emscripten development environment working.&lt;/h3&gt;

&lt;h4 id=&quot;clone-electron_quick_start-to-the-local-folder-from-a-remote-location&quot;&gt;Clone electron_quick_start to the local folder from a remote location.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab5-1.jpg&quot; alt=&quot;Screenshot.1&quot; title=&quot;Screenshot.1&quot; /&gt;
Screenshot.1&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Commands used in the screenshot.1:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Git clone https://emscripten.org/docs/getting_started/downloads.html.git&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;go-to-the-electron_quick_start-folder-in-your-local-terminal-and-install-the-modules&quot;&gt;Go to the electron_quick_start folder in your local terminal and install the modules.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab5-2.jpg&quot; alt=&quot;Screenshot.2&quot; title=&quot;Screenshot.2&quot; /&gt;
Screenshot.2&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Commands used in the screenshot.2:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cd electron-quick-start&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Npm install&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;test-hello-world&quot;&gt;Test Hello World!&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab5-3.jpg&quot; alt=&quot;Screenshot.3&quot; title=&quot;Screenshot.3&quot; /&gt;
Screenshot.3&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab5-4.jpg&quot; alt=&quot;Screenshot.4&quot; title=&quot;Screenshot.4&quot; /&gt;
Screenshot.4&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Commands used in the screenshot.3&amp;amp;4:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Npm start&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;compile-source-code&quot;&gt;Compile source code.&lt;/h3&gt;
&lt;h4 id=&quot;compile-the-native-c-source-code-in-the-terminal-using-emcc&quot;&gt;Compile the native C++ source code in the terminal using emcc.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab5-5.jpg&quot; alt=&quot;Screenshot.5&quot; title=&quot;Screenshot.5&quot; /&gt;
Screenshot.5&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Commands used in the screenshot.5:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;emcc -std=c++14 -pthread -s PROXY_TO_PTHREAD -s ALLOW_MEMORY_GROWTH=1 -s NO_DISABLE_EXCEPTION_CATCHING -s LLD_REPORT_UNDEFINED -s ERROR_ON_UNDEFINED_SYMBOLS=1 main.cpp Order.cpp Customer.cpp Table.cpp TipBox.cpp -o output.js&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;copy-the-generated-wasm-file-and-js-file-to-the-electron-quick-start-folder&quot;&gt;Copy the generated .wasm file and .js file to the electron-quick-start folder.&lt;/h4&gt;
&lt;hr /&gt;
&lt;h4 id=&quot;edit-indexhtml-and-mainjs-on-top-of-the-original-one-and-create-tablejs-as-a-new-feature-whose-function-is-to-save-all-the-performance-data-inside-the-final-generated-app&quot;&gt;Edit index.html and main.js on top of the original one, and create table.js as a new feature, whose function is to save all the performance data inside the final generated app&lt;/h4&gt;
&lt;hr /&gt;
&lt;h4 id=&quot;execute-npm-start-to-test-the-final-local-app-generated-by-the-electron-method&quot;&gt;Execute npm start to test the final local app generated by the electron method.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab5-6.jpg&quot; alt=&quot;Screenshot.6&quot; title=&quot;Screenshot.6&quot; /&gt;
Screenshot.6&lt;/p&gt;

&lt;h4 id=&quot;as-shown-in-screenshoot6-the-save-current-output-file-button-is-added-to-the-newly-created-feature-and-we-finally-test-the-performance-of-the-feature&quot;&gt;As shown in screenshoot6, the “save current output file” button is added to the newly created feature, and we finally test the performance of the feature.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab5-7.jpg&quot; alt=&quot;Screenshot.7&quot; title=&quot;Screenshot.7&quot; /&gt;
Screenshot.7&lt;/p&gt;

&lt;h3 id=&quot;download-1&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Yvonhu/repo/tree/main/Lab5&quot;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;back-to-home-1&quot;&gt;&lt;strong&gt;&lt;em&gt;Back to &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;
</description>
        <pubDate>Sun, 12 Dec 2021 16:11:33 +0800</pubDate>
        <link>http://localhost:4000 /report/2021/12/12/Lab5.html</link>
        <guid isPermaLink="true">http://localhost:4000 /report/2021/12/12/Lab5.html</guid>
        
        
        <category>Report</category>
        
      </item>
    
      <item>
        <title>Welcome to Lab4!</title>
        <description>&lt;h3 id=&quot;back-to-home&quot;&gt;&lt;strong&gt;&lt;em&gt;Back to &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;download&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Yvonhu/repo/tree/main/Lab4&quot;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;document-api-for-library&quot;&gt;Document API for library&lt;/h3&gt;

&lt;h4 id=&quot;customercpp&quot;&gt;customer.cpp&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::string cust_name&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Records the name of the current customer, used to distinguish between different customers.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;int&amp;gt; wanted, received&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Record the desired and received wishes of the current customer.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;int&amp;gt;::iterator it&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Iterator for vector&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::mutex mtx&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Mutual exclusion lock to prevent conflicts when multiple messages are received at the same time&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EMSCRIPTEN_WEBSOCKET_T socket&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Socket operation handle&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool heartflag = true&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Stop the heartbeat response when the active disconnection is unsuccessful, allowing the server to&lt;/li&gt;
        &lt;li&gt;initiate the disconnection&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool orderflag = false&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Used to record whether the order has been made.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::string vector2string(std::vector&amp;lt;int&amp;gt; dishes, std::string split)&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Return the dishes stored in the vector as a split string&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_BOOL WebSocketOpen(int eventType, const EmscriptenWebSocketOpenEvent *e, void *userData)&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Callback function after open of the socket, used to handle the logic after successful open&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_BOOL WebSocketClose(int eventType, const EmscriptenWebSocketCloseEvent *e, void *userData)&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Callback function for the close of the socket.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_BOOL WebSocketError(int eventType, const EmscriptenWebSocketErrorEvent *e, void *userData)&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Callback function when an error occurs in the socket.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_BOOL WebSocketMessage(int eventType, const EmscriptenWebSocketMessageEvent *e, void *userData)&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Callback function for the socket to receive a message, to determine the content of the message - and&lt;/li&gt;
        &lt;li&gt;perform logical processing.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;clientjs&quot;&gt;client.js&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const url&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Record the address of the connection&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;socket handle&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;order_list = {}&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Record the name of the customer who has already done the order&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doing_list = {}&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Record the name of the customer whose delivery is ready and the name of the corresponding customer&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delivered_list = {}&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Record the names of the customers who have delivered and the corresponding dish&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delivery_tasks = []&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Record the messages that are ready for delivery and the names of the corresponding customers&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var customer_count = 0&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Record the number of customers that have been connected&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function getCurrentTime()&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Get the current time&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function receiverdiv(msg)&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Compose the received content into div blocks for display on the HTML page&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function senderdiv(msg)&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Compose the sent content into a div block to be displayed on the HTML page&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function delivery_dish(msg)&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Constructs a div block with the contents of the delivery for display on the HTML page.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function jsontemplate(id, type, name, msg)&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Template for composing JSON strings&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket.addEventListener('open', msg =&amp;gt; {...})&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;The socket’s open event listener, used to handle the logic after the socket is successfully opened&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket.addEventListener('message', e =&amp;gt; {...})&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;socket’s message event listener, used to handle logic after receiving a message&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket.addEventListener('close', e =&amp;gt; {...})&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;socket’s close event listener, used to handle the logic after the socket is closed&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket.addEventListener('error', e =&amp;gt; {...})&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;The socket’s error event listener&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function delivery()&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Loop through delivery messages when the socket is open and send them out&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;When the order list is not empty, loop to generate a delivery to the corresponding customer&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;serverjs&quot;&gt;server.js&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const WebSocket = require('ws')&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const wss = new WebSocket.Server({...})&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const connects = {}&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var table_flag = 0&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;broadcast = function (ws, msg)&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ws.on('connection', (ws, req) =&amp;gt; {...})&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;used to handle the logic after the client connects to the server&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ws.on('message', message =&amp;gt; {...}) &lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;logic processing after receiving a message&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ws.on('close', () =&amp;gt; {...}) &lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;Socket closure&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ws.isAlive = true; &lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;record if the client is active&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pulse&lt;/code&gt;
      &lt;ul&gt;
        &lt;li&gt;send heartbeat messages cyclically to determine if the client is active&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;description-of-the-application-design-and-classes&quot;&gt;Description of the application design and classes&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The main function of the application we designed is to simulate the whole process of ordering and delivering food to customers. The function of the app on the web side is to receive orders from customers and deliver the dishes to the specified customers, and the current customer ends the disconnection when the customer’s desired dish is finished. When the page is open, the application will keep running, and the server will broadcast and web html update information when the customer enters, leaves, and receives the dishes.&lt;/li&gt;
  &lt;li&gt;When multiple customer pages are opened, multiple customer connections will be generated. If the web side (not the server) is open, the customer will order immediately after the connection is successful, and if the web side is not open, the customer will order after clicking the “open” button after the web side is connected.
    &lt;ul&gt;
      &lt;li&gt;For customer, since the customer may recall more than one delivery message, in order to prevent the recorded data from being manipulated at the same time, it is necessary to use a lock so that the corresponding variables cannot be used until the processing of the current message is finished, and then release the lock after the operation is completed.&lt;/li&gt;
      &lt;li&gt;For client.js, it represents a restaurant and is used to handle the order and delivery operations of the corresponding customer, so it needs to store the corresponding dishes of the customer, the dishes waiting for delivery, and the dishes already delivered, in order to distinguish the status of different customers’ dishes and the status of the dishes.&lt;/li&gt;
      &lt;li&gt;For server.js, it is responsible for message forwarding, processing, and the management of clients connections. It needs to record the connected clients and the corresponding names for broadcasting when the clients join or disconnect.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;uml&quot;&gt;UML&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Customer.cpp&lt;/th&gt;
      &lt;th&gt;Client.js&lt;/th&gt;
      &lt;th&gt;Server.js&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::string cust_name;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const url&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const WebSocket = require('ws');&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;int&amp;gt; wanted, received;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const wss = new WebSocket.Server({...});&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;int&amp;gt;::iterator it;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;order_list = {};&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const connects = {};&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::mutex mtx;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doing_list = {};&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var table_flag = 0;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool heartflag = true;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delivered_list = {};&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;broadcast = function (ws, msg)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool orderflag = false;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delivery_tasks = [];&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ws.on('message', message =&amp;gt; {...})&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::string vector2string(std::vector&amp;lt;int&amp;gt; dishes, std::string split)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var customer_count = 0;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ws.on('close', () =&amp;gt; {...})&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_BOOL WebSocketOpen(int eventType, const EmscriptenWebSocketOpenEvent *e, void *userData)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function getCurrentTime()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ws.on('connection', (ws, req) =&amp;gt; {...})&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_BOOL WebSocketClose(int eventType, const EmscriptenWebSocketCloseEvent *e, void *userData)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function receiverdiv(msg)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ws.isAlive = true;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_BOOL WebSocketError(int eventType, const EmscriptenWebSocketErrorEvent *e, void *userData)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function senderdiv(msg)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EM_BOOL WebSocketMessage(int eventType, const EmscriptenWebSocketMessageEvent *e, void *userData)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function delivery_dish(msg)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function jsontemplate(id, type, name, msg)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket.addEventListener('open', msg =&amp;gt; {...})&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket.addEventListener('message', e =&amp;gt; {...})&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket.addEventListener('close', e =&amp;gt; {...})&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;socket.addEventListener('error', e =&amp;gt; {...})&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function delivery()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;compare-the-performance-of-concurrent-stress-tests-and-the-stability-of-long-time-communication-between-the-demo-app-and-the-test-app&quot;&gt;Compare the performance of concurrent stress tests and the stability of long-time communication between the demo app and the test app.&lt;/h3&gt;
&lt;h4 id=&quot;the-demo-application&quot;&gt;The demo application&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The demo app client was able to run on the browser side with calls to the Emscripten c++ WebSockets API.&lt;/li&gt;
  &lt;li&gt;The demo app can use clients as a way to process work, and could also be used as way to submit work .&lt;/li&gt;
  &lt;li&gt;The demo app could coordinate work being processed, and these points will be described and demonstrated in detail below.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The performance of concurrent stress test Concurrent stress testing helps us to evaluate the maximum number of client connections that the app’s server can host and its ability to handle huge volumes of messages simultaneously. This allows us to find more potential problems before the actual release of the app, such as&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;the maximum number of client connections that the server can host, so that we can scale the server in advance during peak traffic periods on weekends or holidays to avoid temporary server overload crashes.&lt;/li&gt;
    &lt;li&gt;Once the maximum number of messages that the server can respond to simultaneously is determined, the total number of messages that can be processed and the average time consumed at each time of the day can be evaluated, which will provide a reference for the reservation service later.&lt;/li&gt;
    &lt;li&gt;If we do not stress test, the server is likely to crash during a period of sudden huge increase in traffic like Christmas, and then face the embarrassing scenario of everyone being on vacation and needing to temporarily mobilize staff to repair the server, thus causing huge financial losses.
So the performance of the stress test was chosen as a comparison standard, in line with what we needed when we were working on the demo app design.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;(Note: the following screenshot server due to debugging needs, part of the log will be repeatedly printed)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The maximum number of client connections that the server can host If the server has been started, the index.html page has been opened and the connection to the server is successful, open as many customer pages as possible and observe the maximum number of customers the server can host:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab4-1.jpg&quot; alt=&quot;Screenshot.1&quot; title=&quot;Screenshot.1&quot; /&gt;
Screenshot.1&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Maximum number of messages the server can reply to simultaneously If the server has been started and the index.html page has been opened and connected to the server successfully, open as many customer pages as possible, click the open button on the index page, let the connected customers order at the same time, and observe whether the index.html can still receive orders and deliver them normally.
    &lt;blockquote&gt;
      &lt;p&gt;The following three screenshots show:&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;the start of concurrent orders.&lt;/li&gt;
        &lt;li&gt;delivery information.&lt;/li&gt;
        &lt;li&gt;customer page information respectively.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab4-2.jpg&quot; alt=&quot;Screenshot.2&quot; title=&quot;Screenshot.2&quot; /&gt;
Screenshot.2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab4-3.jpg&quot; alt=&quot;Screenshot.3&quot; title=&quot;Screenshot.3&quot; /&gt;
Screenshot.3&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab4-4.jpg&quot; alt=&quot;Screenshot.4&quot; title=&quot;Screenshot.4&quot; /&gt;
Screenshot.4&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Customer’s sustainable connection test.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;This is a localized individuality test that can be performed several times to evaluate the average stability of the client’s connection to the server. The more stable the app is, the less likely it is to be suddenly disconnected or suffer crushes, and the better the customer experience will be, resulting in more ongoing customers and potential growth markets.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Customer’s sustainable connection test is done when the server has been started, the index.html page has been opened and the connection to the server is successful, the customer page is opened, the customer is connected, and only the heartbeat messages are sent and received. whether the customer is still connected. In our final test, the customer remained connected to the server for more than 60 hours, and the stability could meet the demand.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab4-5.jpg&quot; alt=&quot;Screenshot.5&quot; title=&quot;Screenshot.5&quot; /&gt;
Screenshot.5&lt;/p&gt;

&lt;h4 id=&quot;native-app&quot;&gt;Native app.&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;I wrote a local Customer.cpp with similar functionality to the demo app for testing, and all the features needed for comparison were already in place. But unfortunately, I were unable to compile it and the problem occurred as shown in the screenshot below. I guessed that it might be related to the include path, so I tried to use CMake to recursively include all directories for compilation, but there were more errors that could not be fixed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab4-6.jpg&quot; alt=&quot;Screenshot.6&quot; title=&quot;Screenshot.6&quot; /&gt;
Screenshot.6&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compilation instructions:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Emsctripten:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;emcc -lpthread -lwebsocket.js customer.cpp -o .\out\customer.html&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;server.js:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node server.js&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -m http.server&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Native C++ code :
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clang++ -g -lpthread -std=c++14 .\*.cpp -o .\out\customer&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;download-1&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Yvonhu/repo/tree/main/Lab4&quot;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;back-to-home-1&quot;&gt;&lt;strong&gt;&lt;em&gt;Back to &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;
</description>
        <pubDate>Sun, 12 Dec 2021 16:11:33 +0800</pubDate>
        <link>http://localhost:4000 /report/2021/12/12/Lab4.html</link>
        <guid isPermaLink="true">http://localhost:4000 /report/2021/12/12/Lab4.html</guid>
        
        
        <category>Report</category>
        
      </item>
    
      <item>
        <title>Welcome to Lab3!</title>
        <description>&lt;h3 id=&quot;back-to-home&quot;&gt;&lt;strong&gt;&lt;em&gt;Back to &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;download&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Yvonhu/repo/tree/main/Lab3&quot;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;document-api-for-library&quot;&gt;Document API for library&lt;/h3&gt;

&lt;h4 id=&quot;class-table&quot;&gt;class: Table&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;{&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;method:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table()&lt;/code&gt;: constructor
      &lt;ul&gt;
        &lt;li&gt;Input：None&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addDish(std::string name, int dishNumber)&lt;/code&gt;: //Add a dish to the Table
      &lt;ul&gt;
        &lt;li&gt;Return value type: void&lt;/li&gt;
        &lt;li&gt;Input: Customer name, the value of the added dish&lt;/li&gt;
        &lt;li&gt;Output: None&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;takeDish(std::string name)&lt;/code&gt;: //takes a dish belonging to the Customer with name in Tables.
      &lt;ul&gt;
        &lt;li&gt;Return value type: int&lt;/li&gt;
        &lt;li&gt;Input: Customer name&lt;/li&gt;
        &lt;li&gt;Output: Boolean value of whether the take was successful taken away.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Attributes:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static Table *s_table&lt;/code&gt;; //Static table object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::map&amp;lt;std::string, std::vector&amp;lt;int&amp;gt;&amp;gt; m_orders&lt;/code&gt;; //stores the dish of the Customer with the
corresponding name&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mutable std::mutex m_tableMutex&lt;/code&gt;; //lock&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;};&lt;/p&gt;

  &lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;class-customer&quot;&gt;class Customer&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;{&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;method:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Customer(std::string name, std::vector&amp;lt;int&amp;gt; wanted, Order *order)&lt;/code&gt;; Constructor
      &lt;ul&gt;
        &lt;li&gt;Input: indicates the maximum number of wanted&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void Start()&lt;/code&gt;; //create a new thread&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void Doing()&lt;/code&gt;; //thread main logic&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void Stop()&lt;/code&gt;; //Set m_bStopping to true to determine if the thread is stopped&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool IsStop() const&lt;/code&gt;; //Determine if the thread is stopped or not&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static void ThreadMain(void *Object)&lt;/code&gt;; //Creates a Customer object and calls the thread main logic&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float GetTotalTips() const&lt;/code&gt;; //Returns the total number of tips paid by itself&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void FinishCallback()&lt;/code&gt;; //prints out the name and tips when the thread is finished&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Attributes:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::string m_name = &quot;&quot;&lt;/code&gt;; //Name&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Order *m_order = nullptr&lt;/code&gt;; //Order object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;int&amp;gt; m_wanted&lt;/code&gt;; //list of dishes that have not yet been ordered&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;int&amp;gt; m_ordered&lt;/code&gt;; //list of dish that have been ordered but not yet fetched&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;int&amp;gt; m_finished&lt;/code&gt;; //list of dishes that have been fetched&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool m_bStopping = false&lt;/code&gt;; //thread stopping flag&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mutable std::mutex m_customerMutex&lt;/code&gt;; //lock&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::thread *m_thread = nullptr&lt;/code&gt;; //thread object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float totalTips = 0&lt;/code&gt;; //total tips paid&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;};&lt;/p&gt;

  &lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;class-tipbox&quot;&gt;class TipBox&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;{&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;method:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TipBox()&lt;/code&gt;; Constructor
      &lt;ul&gt;
        &lt;li&gt;Input: None&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static TipBox *GetInstance()&lt;/code&gt;; //Get TipBox object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static void Destroy()&lt;/code&gt;; //Destroy the TipBox object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;payTips(float tips)&lt;/code&gt;; //put tips into TipBox
      &lt;ul&gt;
        &lt;li&gt;Return value: None&lt;/li&gt;
        &lt;li&gt;Input: the value of the tips to be put into the TipBox&lt;/li&gt;
        &lt;li&gt;Output: None&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getTips()&lt;/code&gt;; Get the total amount of tips in the TipBox
      &lt;ul&gt;
        &lt;li&gt;Return value type: float&lt;/li&gt;
        &lt;li&gt;Input: None&lt;/li&gt;
        &lt;li&gt;Output: the total amount of tips in TipBox&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Attributes:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt;; Indicates the total amount of tips in the current TipBox
      &lt;ul&gt;
        &lt;li&gt;Data type: float&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static TipBox *s_tb&lt;/code&gt;; //Static TipBox object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mutable std::mutex m_tipsMutex&lt;/code&gt;; //lock&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;};&lt;/p&gt;

  &lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;class-order&quot;&gt;class Order&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;{&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Methods：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Order()&lt;/code&gt;; //Constructor&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static Order *GetInstance()&lt;/code&gt;; //Obtain Order object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static void Destroy()&lt;/code&gt;; //Destroy Order object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void CreateCustomerThreads(std::string name, std::vector&amp;lt;int&amp;gt; wanted)&lt;/code&gt;; //Create Customer
objects&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void DestoryCustomerThreads(std::string name)&lt;/code&gt;; Destroy Customer object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void FinishCompletedCustomers()&lt;/code&gt;; Closing the completed Customer object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void orderDish(std::string name, int dishNum)&lt;/code&gt;; //Add the corresponding value of dish in the &amp;gt;Table for the Customer with the corresponding name&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void deliveryDish(std::string name, int dishNum)&lt;/code&gt;; //Dispatch the dish to the customer with &amp;gt;the corresponding name&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void OnDishDelivered(std::string name, int dishNum)&lt;/code&gt;; //Modify the completed dish list &amp;gt;information after successful dispatch&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int takeDish(std::string name)&lt;/code&gt;; Take a copy of the customer’s dish belonging to the name &amp;gt;from Table&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void payTips(float tips)&lt;/code&gt;;// Submit tips to TipBox&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Attributes:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int totalCustomers = 0&lt;/code&gt;; //counts the total number of customers&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::atomic&amp;lt;int&amp;gt; totalDishes = {0}&lt;/code&gt;; //counts the total number of successful dishes dispatched&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static Order *s_order&lt;/code&gt;; //Static Order object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::map&amp;lt;std::string, Customer *&amp;gt; m_customerThreads&lt;/code&gt;; //corresponds to name and Customer&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::map&amp;lt;std::string, std::vector&amp;lt;int&amp;gt;&amp;gt; m_completed&lt;/code&gt;; //corresponds to name with completed &amp;gt;dish&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&amp;lt;std::string&amp;gt; m_finished&lt;/code&gt;; //records the name of the completed Customer&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table *m_table&lt;/code&gt;; //Table object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TipBox *m_tipbox&lt;/code&gt;; //TipBox object&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mutable std::mutex m_orderMutex&lt;/code&gt;; //lock
}
—&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;description-of-the-application-design-and-classes&quot;&gt;Description of the application design and classes&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The function of this application is to simulate the process of customer ordering,  /Picking up and tipping. The loop ends when the customer’s wanted dish is consumed. The program loops several times and prints the time spent in each loop, the number of Customers and the number of dish passed at the end of all loops.&lt;/li&gt;
  &lt;li&gt;Since multiple Customers are operating at the same time, multiple threads are required for concurrency. When more than one Customer is adding/fetching or paying tips to the table at the same time, in order to prevent the data from being manipulated at the same time, it is necessary to use a lock to make the corresponding variables only be manipulated by the current Customer thread before any one of them is manipulated, and then release the lock after the operation is finished so that other After the operation, the lock is released so that other Customers can operate.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;For the Table class, It is used to store the dishes added by Order class corresponding to Customer, so it needs a friend class of Customer and Order, and the class has a vector for storing the dishes added by Order of Customer corresponding to name to distinguish the dishes of different Customers.&lt;/li&gt;
    &lt;li&gt;For the Customer class, It is the main class for executing multi-threads, and it needs to add, take away/tips payment operation to Table/TipBox through Order class, so it needs Order’s friend class, which has vector for storing its own unadded dish, added but not taken away dish, and taken away dish, which can be used to judge the operation of its own thread.&lt;/li&gt;
    &lt;li&gt;For the TipBox class, It represents a box for storing tips, and only needs to operate on its own properties, so it does not need other friend classes, and is only used to receive tips and display the total tips.&lt;/li&gt;
    &lt;li&gt;For the Order class,It is a class used to concatenate Table, Customer, and TipBox, so it needs friend classes of the other three classes to use the method properties of the corresponding classes. In addition, there are vectors in the class to store the Customer and the completed dish to determine the runtime.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;When the three objects are successfully constructed, the first dish of the Table is taken out in each cycle to determine whether this dish is needed in the customer’s wanted. If it is needed, remove the corresponding wanted and put a random amount of tips into the TipBox , And then enter the next cycle; if the dish is not needed in wanted, then enter the next cycle. Until at east one of Table or Customer is empty.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;uml&quot;&gt;UML&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Table&lt;/th&gt;
      &lt;th&gt;Customer&lt;/th&gt;
      &lt;th&gt;TipBox&lt;/th&gt;
      &lt;th&gt;Order&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Customer(std::string name, std::vector&amp;lt;int&amp;gt; wanted, Order *order)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TipBox()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Order()&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetInstance():Table*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Start(): void&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetInstance(): TipBox*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetInstance(): Order*&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Destroy(): void&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Doing(): void&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Destroy(): void&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Destroy(): void&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addDish(std::string name, int dishNumber): void  &lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Stop(): void&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;payTips(float tips): void&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Recollect(): void&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;takeDish(std::string name): int&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IsStop(): bool&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getTips(): float&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateCustomerThreads(std::string name, std::vector&amp;lt;int&amp;gt; wanted): void&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s_table: Table*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ThreadMain(void *Object): void&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s_tb: TipBox*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DestoryCustomerThreads(std::string name): void&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_orders: std::map&amp;lt;std::string, std::vector&amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetTotalTips(): float&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_tipsMutex: std::mutex&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FinishCompletedCustomers(): void&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_tableMutex: std::mutex&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FinishCallback(): void&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;total: float&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;orderDish(std::string name, int dishNum): void&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_name: std::string&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deliveryDish(std::string name, int dishNum): void&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_order: Order*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OnDishDelivered(std::string name, int dishNum): void&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_wanted: std::vector&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;takeDish(std::string name): int&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_ordered: std::vector&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;payTips(float tips): void&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_finished: std::vector&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;totalCustomers = 0: int&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_bStopping: bool&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;totalDishes = {0}: std::atomic&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_customerMutex: std::mutex&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s_order: Order*&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_thread: std::thread*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_customerThreads: std::map&amp;lt;std::string, Customer *&amp;gt; &lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;totalTips: float&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_completed: std::map&amp;lt;std::string, std::vector&amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_finished: std::vector&amp;lt;std::string&amp;gt;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_table: Table*&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_tipbox: TipBox*&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m_orderMutex: std::mutex&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;compare-and-contrast-execution-time-of-the-library-code-between-demo-application-and-comparison-application&quot;&gt;Compare and Contrast execution time of the library code between demo application and comparison application&lt;/h3&gt;

&lt;h4 id=&quot;the-native-comparison-application-execution-time&quot;&gt;The native comparison application execution time&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Our native comparison application is written from C/C++ code and we set the code to loop 40 times and automatically record the results and execution time in the terminal. (Screenshot saved in the data folder)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab3-1.jpg&quot; alt=&quot;Screenshot.1&quot; title=&quot;Screenshot.1&quot; /&gt;
Screenshot.1 The first execution of the native comparison application&lt;/p&gt;

&lt;h4 id=&quot;the-demo-application-execution-time&quot;&gt;The demo application execution time&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Our demo application is creating objects based on js calls to C/C++. We set the code to loop 40 times and print the results and execution time of each run in nodeJS, and print the total execution time results of the 40 runs in the terminal. (The screenshot is saved in the data folder
and shows below)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab3-2.jpg&quot; alt=&quot;Screenshot.2&quot; title=&quot;Screenshot.2&quot; /&gt;
Screenshot.2 The execution of the demo application&lt;/p&gt;

&lt;h4 id=&quot;the-total-execution-time-and-confidence-intervals&quot;&gt;The Total execution time and confidence intervals.&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;We import the 40 execution times of the demo application and the native application 40 execution times into Excel sheet2 and sheet1 respectively, and show confidence intervals for execution time at 95% confidence interval in the table interval.(The Excel sheet is saved in the data folder)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;discussion&quot;&gt;Discussion&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Because we don’t know whether the obtained code execution time data conforms to the normal distribution, we enter the execution time data into the Excel table and show the statistic description.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;For the native comparison application results, the 95% confidence interval is &lt;kbd&gt;[0.19037653,0.21742347]&lt;/kbd&gt;, the average execution time. Is 0.2039 ms.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab3-3.jpg&quot; alt=&quot;Screenshot.3&quot; title=&quot;Screenshot.3&quot; /&gt;
Screenshot.3 Native execution time and confidence interval&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For the demo application result, the 95% confidence interval is &lt;kbd&gt;[0.71431984,4.91218016]&lt;/kbd&gt;, the average execution time is 2.81325 ms.
    &lt;blockquote&gt;
      &lt;p&gt;Since the deviation of the data in test case1 was too large, almost tens of times that of the other test case data, this caused the value of MEAN in the data analysis, and also made the final 95% confidence interval range too large. This problem only occurs with NodeJS and does not occur inside native codebase.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab3-4.jpg&quot; alt=&quot;Screenshot.4&quot; title=&quot;Screenshot.4&quot; /&gt;
Screenshot.4 NodeJS execution time and confidence interval&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Extra: I guessed that the extreme time overrun of NodeJS test case1 might be related to the fact that js loads some resources when it first runs, So I tried to add a lock to the main function to lock at the beginning of each loop and unlock after the loop finishes. Also, in the deliveryDish method of the order class, after determining that the delivered dish is found, a lock is added and then unlocked after the data related to the dish is changed.
The purpose is to prevent conflicts between one loop and another., but unfortunately it seemed to have limited effect in MacOS Unix(Screenshot shows below). Then I tried to change my code execution environment from Mac Unix to Windows, and the value of test case1 was greatly improved, no longer dozens of times larger than the value of other test cases. (Improved code saved in ‘Code_improved folder’)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab3-5.jpg&quot; alt=&quot;Screenshot.5&quot; title=&quot;Screenshot.5&quot; /&gt;
Screenshot.5 Improved NodeJS execution time and confidence in MacOS&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab3-6.jpg&quot; alt=&quot;Screenshot.6&quot; title=&quot;Screenshot.6&quot; /&gt;
Screenshot.6 Improved NodeJS execution time and confidence in Windows&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compilation instructions:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Native C++ code :
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clang++ -pthread -std=c++14 *.cpp -o main&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Emsctripten:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;emcc -std=c++14 -pthread -s PROXY_TO_PTHREAD -s ALLOW_MEMORY_GROWTH=1 -s  O_DISABLE_EXCEPTION_CATCHING -s LLD_REPORT_UNDEFINED -s ERROR_ON_UNDEFINED_SYMBOLS=1 main.cpp Order.cpp Customer.cpp Table.cpp TipBox.cpp -o main.html&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;NodeJS:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;node --experimental-wasm-threads main.js&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;download-1&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Yvonhu/repo/tree/main/Lab3&quot;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;back-to-home-1&quot;&gt;&lt;strong&gt;&lt;em&gt;Back to &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;
</description>
        <pubDate>Sun, 12 Dec 2021 16:11:33 +0800</pubDate>
        <link>http://localhost:4000 /report/2021/12/12/Lab3.html</link>
        <guid isPermaLink="true">http://localhost:4000 /report/2021/12/12/Lab3.html</guid>
        
        
        <category>Report</category>
        
      </item>
    
      <item>
        <title>Welcome to Lab2!</title>
        <description>&lt;h3 id=&quot;back-to-home&quot;&gt;&lt;strong&gt;&lt;em&gt;Back to &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;download&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Yvonhu/repo/tree/main/Lab2&quot;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;document-api-for-library&quot;&gt;Document API for library&lt;/h3&gt;

&lt;h4 id=&quot;class-table&quot;&gt;class: Table&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;{&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;method:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table(int maxSize)&lt;/code&gt;: constructor
      &lt;ul&gt;
        &lt;li&gt;input parameter: represents the maximum number of dishes that can be stored.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addDish()&lt;/code&gt;: add a new dish to the Table.
      &lt;ul&gt;
        &lt;li&gt;Return value type: void&lt;/li&gt;
        &lt;li&gt;input: none&lt;/li&gt;
        &lt;li&gt;output: none&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;takeDish()&lt;/code&gt;: Take away the first dish in Table.
      &lt;ul&gt;
        &lt;li&gt;Return value type: bool&lt;/li&gt;
        &lt;li&gt;input: None&lt;/li&gt;
        &lt;li&gt;output: the status of dish was taken away.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;empty()&lt;/code&gt;; Determine whether the number of dishes in the Table is 0
      &lt;ul&gt;
        &lt;li&gt;Return value type: bool&lt;/li&gt;
        &lt;li&gt;Input: none&lt;/li&gt;
        &lt;li&gt;Output: Is the quantity 0&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printDishes()&lt;/code&gt;; Print the current situation of the dishes of the Table
      &lt;ul&gt;
        &lt;li&gt;Return value: void&lt;/li&gt;
        &lt;li&gt;Input: none&lt;/li&gt;
        &lt;li&gt;Input: none&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDish(int index)&lt;/code&gt;; returns the value of the dish at the specified position
      &lt;ul&gt;
        &lt;li&gt;Return value type: int&lt;/li&gt;
        &lt;li&gt;Input: the location of the dish to be viewed&lt;/li&gt;
        &lt;li&gt;Output: the value of the dish at the corresponding position&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Attributes:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxSize&lt;/code&gt;; Indicates the maximum capacity of the Table
      &lt;ul&gt;
        &lt;li&gt;Data type: int&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;; Indicates the number (position) of the current dish of the Table
      &lt;ul&gt;
        &lt;li&gt;Data type: int&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;};&lt;/p&gt;

  &lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;class-customer&quot;&gt;class Customer&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;{&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;method:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Customer(int maxCount)&lt;/code&gt;; Constructor
      &lt;ul&gt;
        &lt;li&gt;Input: indicates the maximum number of wanted&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;indexWanted(int e)&lt;/code&gt;; returns the same wanted position as e
      &lt;ul&gt;
        &lt;li&gt;Return value type: int&lt;/li&gt;
        &lt;li&gt;Input: the value to be judged&lt;/li&gt;
        &lt;li&gt;Output: the position of the corresponding value (-1 means not found)&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;full()&lt;/code&gt;; Determine whether the number of customers wanted is 0
      &lt;ul&gt;
        &lt;li&gt;Return value type: bool&lt;/li&gt;
        &lt;li&gt;Input: None&lt;/li&gt;
        &lt;li&gt;Output: Is the quantity 0&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printWanted()&lt;/code&gt;; Print the wanted situation of the current Customer
      &lt;ul&gt;
        &lt;li&gt;Return value: void&lt;/li&gt;
        &lt;li&gt;Input: none&lt;/li&gt;
        &lt;li&gt;Output: none&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getWanted(int index)&lt;/code&gt;; returns the wanted value at the specified position
      &lt;ul&gt;
        &lt;li&gt;Return value type: int&lt;/li&gt;
        &lt;li&gt;Input: the wanted location to be viewed&lt;/li&gt;
        &lt;li&gt;Output: the wanted value of the corresponding position&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;takeWanted(int index)&lt;/code&gt;; remove wanted at the specified position
      &lt;ul&gt;
        &lt;li&gt;Return value type: bool&lt;/li&gt;
        &lt;li&gt;Input: the wanted location to be removed&lt;/li&gt;
        &lt;li&gt;Output: Boolean value of whether the removal was successful&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Attributes:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxCount&lt;/code&gt;; Indicates the maximum capacity of Customer
      &lt;ul&gt;
        &lt;li&gt;Data type: int&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;; indicates the number (position) of the customer currently wanted
      &lt;ul&gt;
        &lt;li&gt;Data type: int&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;};&lt;/p&gt;

  &lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;class-tipbox&quot;&gt;class TipBox&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;{&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;method:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TipBox()&lt;/code&gt;; Constructor
      &lt;ul&gt;
        &lt;li&gt;Input: None&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;payTips(float tips)&lt;/code&gt;; put tips into TipBox
      &lt;ul&gt;
        &lt;li&gt;Return value: None&lt;/li&gt;
        &lt;li&gt;Input: the value of tips that needs to be put in TipBox&lt;/li&gt;
        &lt;li&gt;Output: none&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getTips()&lt;/code&gt;; Get the total amount of current tips in TipBox
      &lt;ul&gt;
        &lt;li&gt;Return value type: float&lt;/li&gt;
        &lt;li&gt;Input: None&lt;/li&gt;
        &lt;li&gt;Output: the total amount of tips in TipBox&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Attributes:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt;; Indicates the total amount of tips in the current TipBox
      &lt;ul&gt;
        &lt;li&gt;Data type: float&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;};&lt;/p&gt;

  &lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;description-of-the-classes&quot;&gt;Description of the classes&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;For the Table class, it represents a table with a certain number of dishes, so it needs to contain the maximum number of dishes that can hold, the current number of dishes, and the content variables of the dishes (randomly generated during construction).&lt;/li&gt;
  &lt;li&gt;For the Customer class, it represents a customer who has a demand for dishes, so it needs to contain the maximum number of wanted, the current number of wanted, and the variable of the wanted content (randomly generated during construction).&lt;/li&gt;
  &lt;li&gt;For the TipBox class, it represents a box for storing tips, so a variable that contains the current number of tips is needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;When the three objects are successfully constructed, the first dish of the Table is taken
out in each cycle to determine whether this dish is needed in the customer’s wanted. If it is
needed, remove the corresponding wanted and put a random amount of tips into the TipBox ,
And then enter the next cycle; if the dish is not needed in wanted, then enter the next cycle. Until
at least one of Table or Customer is empty.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;uml&quot;&gt;UML&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Table&lt;/th&gt;
      &lt;th&gt;Customer&lt;/th&gt;
      &lt;th&gt;TipBox&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table(int maxSize)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Customer(int maxCount)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TipBox()&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addDish()&lt;/code&gt;: void&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;indexWanted(int e)&lt;/code&gt;: int&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;payTips(float tips)&lt;/code&gt;: void&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;takeDish()&lt;/code&gt;: bool&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;full()&lt;/code&gt;: bool&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getTips()&lt;/code&gt;: float&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;empty()&lt;/code&gt;: bool&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printWanted()&lt;/code&gt;: void&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printDishes()&lt;/code&gt;: void&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getWanted(int index)&lt;/code&gt;: int&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDish(int index)&lt;/code&gt;: int&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;takeWanted(int index)&lt;/code&gt;: bool&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxSize&lt;/code&gt;: int&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxCount&lt;/code&gt;: int&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;total&lt;/code&gt;: float&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;: int&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;: int&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;compare-and-contrast-execution-time-of-the-library-code-between-demo-application-and-comparison-application&quot;&gt;Compare and Contrast execution time of the library code between demo application and comparison application&lt;/h3&gt;
&lt;h4 id=&quot;the-native-comparison-application-execution-time&quot;&gt;The native comparison application execution time&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Our native comparison application is written from C/C++ code and we set the code to loop 40 times and automatically record the results and execution time in a .txt file named: 1-40. (saved in the data folder)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab2-1.jpg&quot; alt=&quot;Screenshot.1&quot; title=&quot;Screenshot.1&quot; /&gt;
Screenshot.1 The first execution of the native comparison application&lt;/p&gt;

&lt;h4 id=&quot;the-demo-application-execution-time&quot;&gt;The demo application execution time&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Our demo application is creating objects based on js calls to C/C++. We set the code to loop 40 times and print the results and execution time of each run on the web page, and print the total execution time results of the 40 runs in the web console. The File Name:Test Web (number).txt output in the console indicates that JS called the function exported in C/C++ used to write the results of each run to a .txt file the same as the native comparison application, but for unknown reasons the file was not generated, I tried to find out the solution, but did not solve the problem, so the results of each run were printed on the web page.(The screenshot is saved in the data folder and shows below)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab2-2.jpg&quot; alt=&quot;Screenshot.2&quot; title=&quot;Screenshot.2&quot; /&gt;
Screenshot.2 The execution of the demo application&lt;/p&gt;

&lt;h4 id=&quot;extra-credit-attempt-to-improve-performance-of-wasm-code-if-possible-by-modifying-native-andor-javascript-code&quot;&gt;Extra Credit: Attempt to improve performance of WASM code, if possible, by modifying native and/or JavaScript code.&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;In figure2, we can see that the lower right corner of the screenshot of the demo application running on the web side shows the execution time of each run after 40 runs. We can easily find that after 27 runs, the next run time is much larger than the previous run time, which leads to our data performance is not good enough. After consulting the information, I found that the :innerHTML attribute consumes memory and CPU during the execution of the “+=” operation, causing the subsequent operations to be slower than the previous ones. Optimization idea: Add the data that needs to be printed to the web page in each loop before the end of each loop, and then use the “+=” operation to add to the innerHTML attribute. Finally, the optimized result is shown in figure3 (the pre-optimized part is annotated in the js code main.js, and the optimized code is added as the final code, which is saved in main.js in the code folder):&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab2-3.jpg&quot; alt=&quot;Screenshot.3&quot; title=&quot;Screenshot.3&quot; /&gt;
Screenshot.3 The execution of the demo application after improving.&lt;/p&gt;

&lt;h3 id=&quot;the-total-execution-time-and-confidence-intervals&quot;&gt;The Total execution time and confidence intervals.&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;We import the 40 execution times of the demo application and the native application 40 execution times into Excel sheet2 and sheet1 respectively, and show confidence intervals for execution time at 95% confidence interval in the table interval. (The Excel sheet is saved in the data folder)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;discussion&quot;&gt;Discussion&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Because we don’t know whether the obtained code execution time data conforms to the normal distribution, we enter the execution time data into the Excel table and calculate the 95% confidence interval according to the formula of the T distribution. The obtained results are displayed in the Excel table and stored In the data folder.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;For the native comparison application results, the 95% confidence interval is &lt;kbd&gt;[1.401799066,1.422050934]&lt;/kbd&gt;, the average execution time. Is 1.411925ms.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab2-4.jpg&quot; alt=&quot;Screenshot.4&quot; title=&quot;Screenshot.4&quot; /&gt;
Screenshot.4 Native execution time and confidence interval&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For the demo appl icat ion resul t , the 95% confidence interval is &lt;kbd&gt;[7.367394997,13.157605]&lt;/kbd&gt;, the average execution time is 10.2625ms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab2-5.jpg&quot; alt=&quot;Screenshot.5&quot; title=&quot;Screenshot.5&quot; /&gt;
Screenshot.5 Web execution time and confidence interval&lt;/p&gt;

&lt;p&gt;Extra Credit: perform same analysis above on any optimizations performed on code base.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab2-6.jpg&quot; alt=&quot;Screenshot.6&quot; title=&quot;Screenshot.6&quot; /&gt;
Screenshot.6 Web execution time and confidence interval after improving&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Comparing the Sheet2 and Sheet3, we can find that the average execution time reduced from 10.2625 to 5.7025, Standard Deviation reduced from 9.052421983 to 1.249697463. This means that we have played a very good role in the optimization of JS code, and the running time of each time is more continuous and stable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;download-1&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Yvonhu/repo/tree/main/Lab2&quot;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;back-to-home-1&quot;&gt;&lt;strong&gt;&lt;em&gt;Back to &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;
</description>
        <pubDate>Sun, 12 Dec 2021 16:11:33 +0800</pubDate>
        <link>http://localhost:4000 /report/2021/12/12/Lab2.html</link>
        <guid isPermaLink="true">http://localhost:4000 /report/2021/12/12/Lab2.html</guid>
        
        
        <category>Report</category>
        
      </item>
    
      <item>
        <title>Welcome to Lab1!</title>
        <description>&lt;h3 id=&quot;back-to-home&quot;&gt;&lt;strong&gt;&lt;em&gt;Back to &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;download&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Yvonhu/repo/tree/main/Lab1&quot;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;the-all-steps-to-get-emscripten-development-environment-working&quot;&gt;The all steps to get Emscripten development environment working.&lt;/h3&gt;

&lt;h4 id=&quot;install-emscripten-compiler-and-configure-system-variables-to-allow-for-compilation-of-code&quot;&gt;Install Emscripten compiler and configure system variables to allow for compilation of code.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab1-1.jpg&quot; alt=&quot;Screenshot.1&quot; title=&quot;Screenshot.1&quot; /&gt;
Screenshot.1&lt;/p&gt;

&lt;h4 id=&quot;commands-used-in-the-screenshot1&quot;&gt;Commands used in the screenshot.1:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git --version&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Git clone https://emscripten.org/docs/getting_started/downloads.html.git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd emsdk&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./emsdk install latest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./emsdk activate latest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Source &quot;MY PATH/emsdk_env.sh&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab1-2.jpg&quot; alt=&quot;Screenshot.2&quot; title=&quot;Screenshot.2&quot; /&gt;
Screenshot.2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab1-3.jpg&quot; alt=&quot;Screenshot.3&quot; title=&quot;Screenshot.3&quot; /&gt;
Screenshot.3&lt;/p&gt;

&lt;h4 id=&quot;verify-with-hello_worldcpp&quot;&gt;Verify with hello_world.cpp&lt;/h4&gt;
&lt;h4 id=&quot;commands-used-in-the-screenshot23&quot;&gt;Commands used in the screenshot.2&amp;amp;3:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;emcc hello_world.c -o hello.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Node hello.js (Clearly print out &quot;Hello World!&quot; in terminal.)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Python3 -m http.server&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;(Open browser then type in localhost:8000)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Open the hello.html
    &lt;ul&gt;
      &lt;li&gt;(We can Clearly see the “Hello World!” in bowser. )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compare-and-contrast-execution-time-between-native-and-wasm-based-code-vases&quot;&gt;Compare and Contrast execution time between native and wasm based code vases.&lt;/h3&gt;

&lt;h4 id=&quot;perform-a-timing-analysis-for-each-code-base&quot;&gt;Perform a timing analysis for each code base.&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;In this step, I first wrote a quick sort algorithm (code name: Quick_Sort.cpp) based on the C++ language, and output the code’s running time each time (accurate to microseconds) at the end. Then use g++ to compile it in the terminal of the Linux environment, view the local results, and save the results to the output.txt file to facilitate subsequent calculation of the confidence interval.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab1-4.jpg&quot; alt=&quot;Screenshot.4&quot; title=&quot;Screenshot.4&quot; /&gt;
Screenshot.4&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Next, we open the emcc-compiled Quick_Sort.html file in the browser and save the output in Browser_output.txt. (Here I found that the browser’s time precision is not accurate to microseconds, so I tried to change the status of “privacy.reduceTimerPrecision” to “False”, but the problem is still not solved. This will affect the average of the runtime, and thus the confidence interval calculation of the runtime on the browser side.&lt;/li&gt;
  &lt;li&gt;In the third step, for convenience, I wrote a python-based code for running time analysis and confidence interval calculation, named “Confidence Interval.py”. I used this code to read the output of the native code “output.txt” and the output of the browser code “Browser_output.txt” respectively. The corresponding results about the two codes are shown in the following two figure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab1-5.jpg&quot; alt=&quot;Screenshot.5&quot; title=&quot;Screenshot.5&quot; /&gt;
Screenshot.5&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Pic/lab1-6.jpg&quot; alt=&quot;Screenshot.6&quot; title=&quot;Screenshot.6&quot; /&gt;
Screenshot.6&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In screenshot 5, we can see that the mean of 100 times of native C++ codes’ runtime is: 1647.29 microseconds and the variance is: 162,638.7659 microseconds. In my analysis, the reason for such a large variance could be that during the running of the program, a moment of memory is over-occupied by other processes, resulting in a special irregular few runtime values that are particularly large. When we don’t know what distribution the runtime shows, we treat it as a T-distribution and calculate the Tvalue as 1.984317, and finally get the 95% confidence interval value as &lt;kbd&gt;(1567.2695129012043, 1727.3104870987956)&lt;/kbd&gt;, which basically meets the expectation and is between the mean values.&lt;/li&gt;
  &lt;li&gt;In screenshot 6, we can see that the local C++ code was run 100 times with a mean run time of 2787.234043 microseconds, variance of 8169900 microseconds and standard deviation of 810.467956. 95% confidence interval values were obtained &lt;kbd&gt;(2621.2341432411376, 2953.2339418652455)&lt;/kbd&gt;, and since the above The accuracy problem has caused the mean error, and with the huge variance already standard deviation calculated, we can learn that the standard error of the running time is so huge that the confidence interval obtained can be considered not statistically significant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;download-1&quot;&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Yvonhu/repo/tree/main/Lab1&quot;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;h3 id=&quot;back-to-home-1&quot;&gt;&lt;strong&gt;&lt;em&gt;Back to &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;
</description>
        <pubDate>Sun, 12 Dec 2021 16:11:33 +0800</pubDate>
        <link>http://localhost:4000 /report/2021/12/12/Lab1.html</link>
        <guid isPermaLink="true">http://localhost:4000 /report/2021/12/12/Lab1.html</guid>
        
        
        <category>Report</category>
        
      </item>
    
      <item>
        <title>Another title</title>
        <description>&lt;figure&gt;

&lt;p&gt;&lt;img src=&quot;/theme-assets/news/news-temp.jpg&quot; alt=&quot;temp&quot; title=&quot;Alt text here&quot; /&gt;&lt;/p&gt;


&lt;p class=&quot;caption&quot;&gt;My caption&lt;/p&gt;
&lt;/figure&gt;

&lt;p&gt;Quisque ut dolor gravida, placerat libero vel, euismod. Integer legentibus erat a ante historiarum dapibus. At nos hinc posthac, sitientis piros Afros. Nihil hic munitissimus habendi senatus locus, nihil horum? Vivamus sagittis lacus vel augue laoreet rutrum faucibus.&lt;/p&gt;

&lt;p&gt;Donec sed odio operae, eu vulputate felis rhoncus. Inmensae subtilitatis, obscuris et malesuada fames. Hi omnes lingua, institutis, legibus inter se differunt. Praeterea iter est quasdam res quas ex communi. Curabitur est gravida et libero vitae dictum. Sed haec quis possit intrepidus aestimare tellus.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Feb 2018 08:00:00 +0800</pubDate>
        <link>http://localhost:4000 /2018/02/02/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000 /2018/02/02/welcome-to-jekyll.html</guid>
        
        
      </item>
    
  </channel>
</rss>
